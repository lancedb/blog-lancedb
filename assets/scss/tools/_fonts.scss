@font-face {
    font-family: 'Aeonik';
    src: url('/fonts/aeonik-regular.woff2') format('woff2'),
         url('/fonts/aeonik-regular.woff') format('woff');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: 'Aeonik';
    src: url('/fonts/aeonik-medium.woff2') format('woff2'),
         url('/fonts/aeonik-medium.woff') format('woff');
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}

/* ==========================================================================
 * Font related functions
 * ========================================================================== */

/**
 *  Calculate line-height ratio from font-size and line-height in px value
 */
 @mixin line-height-ratio($font-size, $lh) {
  @if map-has-key($font-sizes, $font-size) {
    line-height: $lh / map-get($font-sizes, $font-size);
  } @else {
    @error "`#{$font-size}` is not a valid font size key in $font-sizes.";
  }
}

/**
 *  Mixin for setting font-size in REM through a Sass Map with all available sizes
 *
 *  USAGE:
 *
 *  .myClass {
 *      @include font-size(x-large);
 *  }
 */
@mixin font-size($size) {
  @if map-has-key($font-sizes, $size) {
    font-size: value-to-rem(map-get($font-sizes, $size));
  } @else if is-number($size) {
    font-size: value-to-rem($size);
  } @else {
    @warn "`#{$size}` is not a valid value. It must be one of the following: #{map-keys($font-sizes)}.";
  }
}

/**
 *  A simple mixin for accessing the font families from our mapping
 *
 *  USAGE:
 *
 *  span {
 *      @include font-family(primary);
 *  }
 */
@mixin font-family($family: 'base') {
  @if map-has-key($font-families, $family) {
    font-family: map-get($font-families, $family);
  } @else {
    @warn "Unknown family: `#{$family}` in $font-families.";
    font-family: map-get($font-families, system);
  }
}

/**
 *  Font mixin for setting font-size, font-weight, and line-height
 *
 *  USAGE:
 *
 *  .myClass {
 *      @include font(x-large, 34, 500);
 *  }
 *
 *  .myClass {
 *    @include font(medium, $weight: 300);
 *  }
 */
@mixin font($size, $lh: null, $weight: null) {
  @include font-size($size);

  @if $lh {
    @include line-height-ratio($size, $lh);
  }

  @if $weight {
    font-weight: $weight;
  }
}

@mixin clear-font() {
  font-size: 0;
  line-height: 0;
}

/* Utility function to convert px to rem */
@function value-to-rem($value) {
  @if is-number($value) {
    @return $value / 16 * 1rem; // Assuming the root font-size is 16px
  } @else {
    @error "`#{$value}` is not a valid number.";
  }
}
